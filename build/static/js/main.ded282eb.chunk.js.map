{"version":3,"sources":["config/config.js","Note/Note.jsx","NoteForm/NoteForm.jsx","App.js","serviceWorker.js","index.js"],"names":["DB_CONFIG","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","Note","props","noteContent","noteId","id","window","confirm","this","removeNote","className","onClick","handelRemove","Component","NoteForm","addNote","bind","textInput","value","focus","placeholder","ref","input","type","App","state","notes","app","firebase","initializeApp","db","database","child","on","snap","push","key","val","setState","i","length","splice","console","log","note","set","remove","map","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yVAAaA,EAAY,CACrBC,OAAQ,0CACRC,WAAY,gCACZC,YAAa,uCACbC,UAAW,gBACXC,cAAe,4BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,gBCuBJC,G,wBA3BZ,WAAYC,GAAO,IAAD,8BACd,4CAAMA,KACDC,YAAcD,EAAMC,YACzB,EAAKC,OAASF,EAAME,OAHN,E,0EAMRC,GACOC,OAAOC,QAAQ,+CAG/BC,KAAKN,MAAMO,WAAWJ,K,+BAKd,IAAD,OACJ,OACA,yBAAKK,UAAU,QACX,0BACAC,QAAS,kBAAM,EAAKC,aAAa,EAAKR,UADtC,QAGA,2BAAII,KAAKL,kB,GAtBDU,cC6BJC,G,kBA5Bf,aAAc,IAAD,8BACb,+CACKC,QAAU,EAAKA,QAAQC,KAAb,gBAFF,E,uEAMbR,KAAKN,MAAMa,QAAQP,KAAKS,UAAUC,OAClCV,KAAKS,UAAUC,MAAO,IACtBV,KAAKS,UAAUE,U,+BAIN,IAAD,OACJ,OACI,yBAAKT,UAAU,YACf,2BACAU,YAAY,eACbC,IAAK,SAAAC,GAAU,EAAKL,UAAYK,GAC/BC,KAAK,SACL,4BACAZ,QAASH,KAAKO,SADd,iB,GApBeF,cCqGRW,E,YA5Fb,aAAc,IAAD,8BACX,+CACKC,MAAQ,CACXC,MAAM,IAKR,EAAKC,IAAMC,IAASC,cAAcrC,GAClC,EAAKsC,GAAK,EAAKH,IAAII,WAAWV,MAAMW,MAAM,SAE1C,EAAKjB,QAAU,EAAKA,QAAQC,KAAb,gBACf,EAAKP,WAAa,EAAKA,WAAWO,KAAhB,gBAZP,E,iFAeO,IAAD,OACTU,EAAUlB,KAAKiB,MAAfC,MACRlB,KAAKsB,GAAGG,GAAG,eAAe,SAAAC,GACxBR,EAAMS,KAAK,CACT/B,OAAQ8B,EAAKE,IACjBjC,YAAa+B,EAAKG,MAAMlC,cAEtB,EAAKmC,SAAS,CAACZ,aAErBlB,KAAKsB,GAAGG,GAAG,iBAAiB,SAAAC,GAC1B,IAAK,IAAIK,EAAI,EAAGA,EAAIb,EAAMc,OAAQD,IAC5Bb,EAAMa,GAAGnC,SAAW8B,EAAKE,KAC3BV,EAAMe,OAAOF,EAAE,GAGnBG,QAAQC,IAAIjB,GACZ,EAAKY,SAAS,CAACZ,e,8BAOTkB,GASJpC,KAAKsB,GAAGK,OAAOU,IAAI,CAAC1C,YAAayC,M,iCAIxBxC,GACXI,KAAKsB,GAAGE,MAAM5B,GAAQ0C,W,+BAIf,IAAD,OACR,OACA,yBAAKpC,UAAU,kBAEf,yBAAKA,UAAU,eACb,qDAIF,yBAAKA,UAAU,aACb,4BAEAF,KAAKiB,MAAMC,MAAMqB,KAAK,SAAAH,GACpB,OACE,kBAAC,EAAD,CACAzC,YAAayC,EAAKzC,YAClBC,OAASwC,EAAKxC,OACdgC,IAAKQ,EAAKxC,OACVK,WAAY,EAAKA,kBAQvB,yBAAKC,UAAU,eACf,kBAAC,EAAD,CAAUK,QAASP,KAAKO,gB,GArFNF,aCEEmC,QACW,cAA7B1C,OAAO2C,SAASC,UAEe,UAA7B5C,OAAO2C,SAASC,UAEhB5C,OAAO2C,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ded282eb.chunk.js","sourcesContent":["export const DB_CONFIG = {\n    apiKey: \"AIzaSyBIuynqmaUlhiCGFiXdTvubwgSjnsM6_pA\",\n    authDomain: \"pizarra-bbd22.firebaseapp.com\",\n    databaseURL: \"https://pizarra-bbd22.firebaseio.com\",\n    projectId: \"pizarra-bbd22\",\n    storageBucket: \"pizarra-bbd22.appspot.com\",\n    messagingSenderId: \"246030570588\",\n    appId: \"1:246030570588:web:d632134f162a9b7f3b0299\",\n    measurementId: \"G-LB5CMK4692\"\n}","import React, { Component } from 'react';\nimport './Note.css';\n\nclass Note extends Component {\n   constructor(props){\n       super(props);\n       this.noteContent = props.noteContent;\n       this.noteId = props.noteId;\n   } \n\nhandelRemove(id){\n   const response = window.confirm('est√°s seguro de que quieres eliminarlo ')\n    \n   if (response){\n    this.props.removeNote(id);\n   }\n  return;\n}\n\n   render(){\n       return(\n       <div className=\"Note\">\n           <span\n           onClick={() => this.handelRemove(this.noteId)}\n           >&times;</span>\n           <p>{this.noteContent}</p>\n       </div>\n       )\n   }\n}\n\nexport default Note;\n","import React, {Component} from 'react';\nimport './NoteForm.css'\n\nclass NoteForm extends Component{\nconstructor(){\nsuper();\nthis.addNote = this.addNote.bind(this);\n}\n\naddNote(){\nthis.props.addNote(this.textInput.value)\nthis.textInput.value =\" \";\nthis.textInput.focus();\n}\n\n\nrender(){\n    return(\n        <div className=\"NoteForm\">\n        <input \n        placeholder=\"write a note\"\n       ref={input => {this.textInput = input;}}\n        type=\"text\"/>\n        <button\n        onClick={this.addNote}>\n            Add Note\n        </button>\n    </div> \n    )\n}\n}\n\nexport default NoteForm","import React, { Component } from 'react';\nimport './App.css';\n\nimport firebase from 'firebase';\nimport { DB_CONFIG } from './config/config';\nimport 'firebase/database';\n\nimport Note from './Note/Note';\nimport NoteForm from './NoteForm/NoteForm';\n\nclass App extends Component {\n\n  constructor(){\n    super();\n    this.state = {\n      notes:[\n        //{noteId: 1, noteContent:'note 1'}, \n        //{noteId: 2, noteContent:'note 2'}\n      ]\n    };\n    this.app = firebase.initializeApp(DB_CONFIG);\n    this.db = this.app.database().ref().child('notes');\n\n    this.addNote = this.addNote.bind(this)\n    this.removeNote = this.removeNote.bind(this);\n  }\n\n  componentDidMount(){\n    const { notes } = this.state;\n    this.db.on('child_added', snap => {\n      notes.push({\n        noteId: snap.key,\n\t\t\t\tnoteContent: snap.val().noteContent\n      });\n      this.setState({notes});\n    });\nthis.db.on('child_removed', snap => {\n  for (let i = 0; i < notes.length; i++){\n    if (notes[i].noteId === snap.key){\n      notes.splice(i,1);\n    }\n  }\n  console.log(notes);\n  this.setState({notes});\n\n})\n  }\n\n\n\naddNote(note){\n/*\tlet { notes } = this.state;\n\t\tnotes.push({\n\t\t\tnoteId: notes.length + 1,\n\t\t\tnoteContent: note\n\t\t});\n\t\tthis.setState({\n\t\t\tnotes\n    });*/\n    this.db.push().set({noteContent: note});\n\n  }\n\n  removeNote(noteId) {\n\t\tthis.db.child(noteId).remove();\n\t}\n\n\nrender(){\nreturn(\n<div className=\"notesContainer\">\n\n<div className=\"notesHeader\">\n  <h1>React y Firebase App</h1>\n</div>\n\n\n<div className=\"notesBody\">\n  <ul>\n{\n  this.state.notes.map (note => {\n    return(\n      <Note\n      noteContent={note.noteContent}\n      noteId ={note.noteId}\n      key={note.noteId}\n      removeNote={this.removeNote}\n      />\n    )\n  })\n}\n</ul>\n</div>\n\n<div className=\"notesFooter\">\n<NoteForm addNote={this.addNote}/>\n</div>\n\n</div>\n\n)\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}